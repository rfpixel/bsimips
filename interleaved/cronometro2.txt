# Imprime o tempo decorrido em segundos entre os procedimentos
# ligaCron e desligaCron. Para verificar o funcionamento é
# interessante rodar o programa passo a passo, senão ele
# executa muito rápido, retornando 0 segundos como resultado.

.text			 # Indica onde começa as instruções do programa (em oposição a .data que indica a declaração de dados)
	
main:
	# Chamada de procedimentos, os quais estão codificados depois do programa principal
	
	jal ligaCron	  # Chama o procedimento ligaCron, que não recebe argumentos, nem retorna valores.
	jal desligaCron   # Chama o procedimento desligaCron, que não recebe argumentos, mas retorna o tempo decorrido em segundos.
	
	# Imprime o resultado na tela
	
	add $a0, $0, $v0  # Salva a diferença em $a0, para possibilitar a impressão
	addi $v0, $0, 1   # Agenda a syscall para imprimir um inteiro na tela
	syscall		  # Imprime a diferença na tela
	
	# Executa a syscall que indica o término do programa. ATENÇÃO: Se não colocado, a execução continua linha a linha!
	
	addi $v0, $0, 10  # Agenda a syscall com o código de término
	syscall		  # Executa a syscall terminando o programa


ligaCron:
	addi $v0, $0, 30  # Agenda a syscall para pegar o tempo do sistema

	syscall		  # CRONOMETRO ON: Guarda em $a0 o tempo em milissegundos decorrido
			  # desde a meia-noite em ponto do dia 01/01/1970 (OBS: Na realidade,
			  # o valor corresponde aos 32 bits menos significativos do
			  # total decorrido. Os bits mais significativos são salvos
			  # no registrador $a1, mas podem ser desprezados para o
			  # propósito do jogo.
			 
	add $t1, $0, $a0  # Grava o tempo de início da cronometragem em $t1
	jr $ra		  # Retorna à execução no programa principal
	
desligaCron:
	syscall		  # CRONOMETRO OFF: Novamente guarda em $a0 o tempo decorrido desde
			  # a meia-noite do dia 01/01/1970.
			 
	add $t2, $0, $a0  # Grava o tempo de fim da cronometragem em $t2
	
	sub $t3, $t2, $t1   # Subtrai os tempos obtidos e salva a diferença em $t3
	divu $t3, $t3, 1000 # Converte de milissegundos para segundos
	add $v0, $t3, $0  # Grava o resultado em $v0, para que possa ser retornado
	jr $ra		  # Retorna à execução no programa principal, retornando $v0
		

